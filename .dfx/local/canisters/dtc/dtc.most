// Version: 1.0.0
type AccountIdentifier = Blob;
type ApiError = {#InvalidTokenId; #Other; #Unauthorized; #ZeroAddress};
type Approved = Bool;
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Bio =
  {
    dedications : Text;
    dob : Text;
    name : Text;
    photos : [FileMetaData];
    pob : Text;
    preface : Text
  };
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Dip721NFT =
  actor {
    balanceOfDip721 : shared query Principal -> async Nat64;
    clearUnsubmittedFile : shared () -> async Result<(), ApiError>;
    getMaxLimitDip721 : shared query () -> async Nat16;
    getMetadataDip721Chunk :
      shared query (Principal, Nat, TokenId) -> async MetadataResult;
    getTokenMetadataInfo : shared query Principal -> async [TokenMetaData];
    logoDip721 : shared query () -> async LogoResult;
    mintNft : shared (Principal, Text, Nat) -> async MintReceipt;
    nameDip721 : shared query () -> async Text;
    ownersOfDip721 : shared query TokenId -> async OwnerResult;
    safeTransferFromDip721 :
      shared (Principal, Principal, TokenId) -> async TxReceipt;
    setInitArgs : shared Dip721NonFungibleToken -> async Result<(), ApiError>;
    supportedInterfacesDip721 : shared query () -> async [InterfaceId];
    symbolDip721 : shared query () -> async Text;
    totalSupplyDip721 : shared query () -> async Nat64;
    transferFromDip721 :
      shared (Principal, Principal, TokenId) -> async TxReceipt;
    uploadNftChunk : shared (Nat, Blob) -> async Result<(), ApiError>;
    wallet_receive : shared () -> async {accepted : Nat64}
  };
type Dip721NFT__1 = Dip721NFT;
type Dip721NonFungibleToken =
  {
    collectionIndex : Nat;
    creatorOfCollection : Principal;
    logo : LogoResult;
    maxLimit : Nat16;
    name : Text;
    symbol : Text
  };
type Error__7 =
  {
    #AlreadyExists;
    #InsufficientFunds;
    #NoInputGiven;
    #NotAcceptingRequests;
    #NotAuthorized;
    #NotFound;
    #TxFailed;
    #UserNameTaken;
    #WalletBalanceTooLow;
    #ZeroAddress
  };
type FileMetaData = {fileName : Text; fileType : Text; lastModified : Int};
type Hash = Nat32;
type ICP = {e8s : Nat64};
type InterfaceId =
  {#Approval; #Burn; #Mint; #TransactionHistory; #TransferNotification};
type Journal =
  actor {
    canisterAccount : shared query () -> async AccountIdentifier;
    canisterBalance : shared () -> async ICP;
    clearUnsubmittedFiles : shared () -> async Result<(), Error__7>;
    createEntry :
      shared JournalEntryInput ->
        async Result<([(Nat, JournalEntry)], Bio), Error__7>;
    deleteJournalEntry :
      shared Nat -> async Result<([(Nat, JournalEntry)], Bio), Error__7>;
    deleteJournalEntryFile : shared Text -> async Result<(), Error__7>;
    deleteSubmittedFile : shared Text -> async Result<(), Error__7>;
    deleteUnsubmittedFile : shared Text -> async Result<(), Error__7>;
    getEntriesToBeSent : shared () -> async [(Nat, JournalEntry)];
    readJournal : shared () -> async ([(Nat, JournalEntry)], Bio, Text);
    readJournalEntry : shared Nat -> async Result<JournalEntry, Error__7>;
    readJournalFileChunk : shared (Text, Nat) -> async Result<Blob, Error__7>;
    readJournalFileSize : shared Text -> async Result<Nat, Error__7>;
    readWalletTxHistory : shared () -> async [(Nat, Transaction)];
    setMainCanisterPrincipalId : shared () -> async Result<(), Error__7>;
    submitFiles : shared () -> async Result<(), Error__7>;
    transferICP : shared (Nat64, AccountIdentifier) -> async Bool;
    updateBio : shared Bio -> async Result<Bio, Error__7>;
    updateJournalEntry :
      shared (Nat, JournalEntryInput) ->
        async Result<([(Nat, JournalEntry)], Bio), Error__7>;
    updatePhotos : shared [FileMetaData] -> async Result<Bio, Error__7>;
    updateTxHistory : shared Transaction -> async ();
    uploadFileChunk :
      shared (Text, Nat, Blob) -> async Result<Text, Error__7>;
    wallet_balance : shared () -> async Nat;
    wallet_receive : shared () -> async {accepted : Nat64}
  };
type JournalEntry =
  {
    date : Text;
    draft : Bool;
    emailOne : Text;
    emailThree : Text;
    emailTwo : Text;
    entryTitle : Text;
    filesMetaData : [FileMetaData];
    location : Text;
    read : Bool;
    sent : Bool;
    text : Text;
    unlockTime : Int
  };
type JournalEntryInput =
  {
    date : Text;
    draft : Bool;
    emailOne : Text;
    emailThree : Text;
    emailTwo : Text;
    entryTitle : Text;
    filesMetaData : [FileMetaData];
    location : Text;
    text : Text;
    unlockTime : Int
  };
type Journal__1 = Journal;
type Key__1<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key__1<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type LogoResult = {data : Text; logo_type : Text};
type MetadataResult = Result__2<Blob, ApiError>;
type MintReceipt = Result__2<MintReceiptPart, ApiError>;
type MintReceiptPart = {id : Nat; token_id : TokenId};
type Nft__1 = {nftCollection : Dip721NFT__1};
type OwnerResult = Result__2<[Principal], ApiError>;
type Profile =
  {
    accountId : ?AccountIdentifier;
    approved : ?Bool;
    email : ?Text;
    id : Principal;
    journal : Journal__1;
    monthsSpentAsTreasuryMember : ?Nat;
    treasuryContribution : ?Nat64;
    treasuryMember : ?Bool;
    userName : ?Text
  };
type Result<Ok, Err> = {#err : Err; #ok : Ok};
type Result__2<S, E> = {#Err : E; #Ok : S};
type TokenId = Nat64;
type TokenMetaData =
  {
    fileType : Text;
    id : TokenId;
    nftDataTrieSize : Nat;
    numberOfCopiesOwned : Nat
  };
type Transaction =
  {
    balanceDelta : Nat64;
    increase : Bool;
    recipient : ?AccountIdentifier;
    source : ?AccountIdentifier;
    timeStamp : ?Nat64
  };
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type TxReceipt = Result__2<Nat, ApiError>;
actor {
  stable var canisterData :
    {
      acceptingRequests : Bool;
      backEndCyclesBurnRatePerDay : Nat;
      backEndPrincipal : Text;
      frontEndPrincipal : Text;
      lastRecordedBackEndCyclesBalance : Nat;
      lastRecordedTime : Int;
      managerCanisterPrincipal : Text;
      nftId : Int;
      nftOwner : Text
    };
  stable var defaultControllers : [Principal];
  stable var heartBeatCount : Nat64;
  stable var nftCollections :
    {#branch : Branch<Nat, Nft__1>; #empty; #leaf : Leaf<Nat, Nft__1>};
  stable var nftCollectionsIndex : Nat;
  stable var profilesArray : [(Principal, Profile)];
  stable var requestsForAccess : [(Text, Approved)];
  stable var startIndexForBlockChainQuery : Nat64;
  stable var supportMode : Bool
};
