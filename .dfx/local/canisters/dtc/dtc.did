type User = 
 service {
   canisterAccount: () -> (AccountIdentifier) query;
   canisterBalance: () -> (Tokens);
   create: () -> (Result_6);
   createJournalEntryFile: (text, nat, blob) -> (Result);
   delete: () -> (Result);
   getEntriesToBeSent: () -> (Result_5);
   readEntry: (EntryKey) -> (Result_4);
   readEntryFile: (text) -> (Result_3);
   readJournal: () -> (Result_2);
   transferICP: (nat64, AccountIdentifier) -> (Result);
   updateBio: (Bio) -> (Result);
   updateJournalEntry: (opt EntryKey, opt JournalEntryInput) -> (Result_1);
   updateProfile: (ProfileInput) -> (Result);
 };
type Trie_1 = 
 variant {
   branch: Branch_1;
   "empty";
   leaf: Leaf_1;
 };
type Trie = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type Tokens = record {e8s: nat64;};
type Result_6 = 
 variant {
   err: Error;
   ok: AmountAccepted;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             vec record {
                   nat;
                   JournalEntry;
                 };
           };
 };
type Result_4 = 
 variant {
   err: Error;
   ok: JournalEntry;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: Trie_1;
 };
type Result_2 = 
 variant {
   err: Error;
   ok:
    record {
      address: vec nat8;
      balance: Tokens;
      email: opt text;
      userJournalData: record {
                         vec record {
                               nat;
                               JournalEntry;
                             };
                         Bio;
                       };
      userName: opt text;
    };
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Trie;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileInput = 
 record {
   email: opt text;
   userName: opt text;
 };
type List_1 = 
 opt record {
       record {
         Key;
         blob;
       };
       List_1;
     };
type List = 
 opt record {
       record {
         Key;
         JournalEntry;
       };
       List;
     };
type Leaf_1 = 
 record {
   keyvals: AssocList_1;
   size: nat;
 };
type Leaf = 
 record {
   keyvals: AssocList;
   size: nat;
 };
type Key = 
 record {
   hash: Hash;
   key: nat;
 };
type JournalEntryInput = 
 record {
   date: text;
   emailOne: text;
   emailThree: text;
   emailTwo: text;
   entryTitle: text;
   file1ID: text;
   file2ID: text;
   location: text;
   lockTime: int;
   "text": text;
 };
type JournalEntry = 
 record {
   date: text;
   emailOne: text;
   emailThree: text;
   emailTwo: text;
   entryTitle: text;
   file1ID: text;
   file2ID: text;
   location: text;
   lockTime: int;
   sent: bool;
   "text": text;
   unlockTime: int;
 };
type Hash = nat32;
type Error = 
 variant {
   AlreadyExists;
   InsufficientFunds;
   NoInputGiven;
   NotAuthorized;
   NotFound;
   TxFailed;
   UserNameTaken;
 };
type EntryKey = record {entryKey: nat;};
type Branch_1 = 
 record {
   left: Trie_1;
   right: Trie_1;
   size: nat;
 };
type Branch = 
 record {
   left: Trie;
   right: Trie;
   size: nat;
 };
type Bio = 
 record {
   dedications: text;
   dob: text;
   name: text;
   pob: text;
   preface: text;
 };
type AssocList_1 = 
 opt record {
       record {
         Key;
         blob;
       };
       List_1;
     };
type AssocList = 
 opt record {
       record {
         Key;
         JournalEntry;
       };
       List;
     };
type AmountAccepted = record {accepted: nat64;};
type AccountIdentifier = blob;
service : () -> User
